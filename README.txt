                                                 "Все чертовски собрано вместе!"
                                                 (Лев, "Роскошная комедия Ноэля Филдинга")



Frontstarter - это фреймворк для быстрой вёрстки проекта с нуля при помощи PHP и LESS.

Две основные задачи, которые он решает:
1. Организация файлов
2. Реализация типовых элементов



                                1. ОРГАНИЗАЦИЯ ФАЙЛОВ


1.1 Корень проекта

index.html содержит список всех страниц проекта.
Каждая из них включает в себя:
    header.php - подключение библиотек + шапка сайта
    footer.php - подвал сайта
    common.css - общие стили
    common.js - общие скрипты
    (опционально) имя_страницы.css - индивидуальные стили
    (опционально) имя_страницы.js - индивидуальные скрипты

Имя страницы задаётся в $pageId.

Изначально присутствуют три страницы:
    demo.php   - тестовая страница типовых решений
    empty.php  - пустая страница как основа для создания новых
    lego.php   - для сборки и хранения повторяющихся элементов сайта

Для сохранения .html-файла нужно передать странице параметр ?html.
Файл сохраняется в корне проекта, с тем же именем.


1.2 Стили и скрипты

Каталоги css и js имеют одинаковую структуру:
    /default - библиотечный код
    /default/snippets - код типовых решений
    /modules - код общих фрагментов
    /pages - код индивидуальных фрагментов

/modules - это то, что подключается на каждой странице
/pages - это то, что подключается только на одной странице

Из /modules всегда используются файлы common.css/js. 
Из /pages всегда используются файлы с именем равным $pageId страницы.

Дополнительные css-модули подключаются вручную в common.less, js-модули - в templates/header.php.
Библиотеки также подключаются в templates/header.php

И /modules, и /pages содержат файл empty.less/js - это основа для создания новых файлов.
Если сайт не адаптивный, из основы рекомендуется удалить медиазапросы.

Стили в /css/pages рекомендуется ограничивать селектором body.page-имястраницы - чтобы оставлять возможность склеить все css в один без риска что-нибудь сломать.

В каждом .less-файле подключается /default/mixins.less. Он предоставляет:
    константы для transition-timing-function
    миксины для улучшения кроссбразуерности
    миксины для типовых решений
    (опционально) константы проекта - цвета, названия шрифтов и.т.д


1.3 Прочее

Каталог img:
    /pages/имя_страницы   - индивидуальные картинки по страницам
    /bg      - фоны
    /content - тестовое наполнение нового проекта
    /icons   - значки, лоадеры и прочая мелочь
    /logo    - логотипы
    /jreject - для старых браузеров

Каталог /fonts содержит сконвертированные для веб шрифты, stylesheet.css подключается в common.less автоматически.





                                2. РЕАЛИЗАЦИЯ ТИПОВЫХ ЭЛЕМЕНТОВ

См. /js/snippets и /css/snippets


    кнопки:
        action-button.less

    скроллбары:
        frontstarter.scrollbars.js
        tinyscrollbar.css

    слайдеры:
        frontstarter.carousel.js
        jcarousel.less
        owl.carousel.css

    валидация форм:
        frontstarter.forms.js

    выпадающие списки:
        frontstarter.forms.js
        selectboxit.css

    модальные окна:
        [TODO]

    подсказки:
        tooltip.css

    выбор файла:
        [TODO]:

    выбор даты:
        [TODO]:

    вкладки:
        [TODO]

    лайтбокс:
        lightbox.css

    прилипающий скролл:
        frontstarter.stickyscroll.js

    полноэкранные секции:
        frontstarter.fullscreen.js

    параллакс:
        frontstarter.parallax.js

    отложенная загрузка изображений:
        [TODO]

    прелоадеры:
        [TODO]

    заглушка для старых браузеров:
        [TODO]

    вывод данных в консоль по условию:
        debug=true в localStorage





                                ИЗВЕСТНЫЕ ПРОБЛЕМЫ


Проблема: WinLESS не перекомпилирует common.less при изменении входящего в него модуля.
Решение: Исключить папку из WinLESS и импортировать её заново.


Проблема: Необходимость менять стили после интеграции вёрстки в CMS.
Решение: Для упрощения работы после интеграции рекомендуется отказаться от LESS и вносить правки напрямую в CSS. Использовать less.js не стоит из-за замедления загрузки страницы и неудобного кэширования. Компиляция же при помощи lessc или WinLess требует дополнительных действий, что на небольших правках сводит на нет ускорение от LESS.


Проблема: Необходимость задавать страницам индвидуальные классы для <body> и подключать индивидуальные стили и скрипты
Решение:
    для Битрикс:
    в коде страницы:
        $APPLICATION->SetPageProperty("bodyClass", "имястраницы");
    в header.php:
        $bodyClass = $APPLICATION->getProperty("bodyClass");
        $APPLICATION->setAdditionalCSS(SITE_TEMPLATE_PATH."/css/pages/{$bodyClass}.css");
        $APPLICATION->addHeadScript(SITE_TEMPLATE_PATH."/js/pages/{$bodyClass}.js");
        <body class="page-<? $APPLICATION->showProperty("bodyClass");?>">
    